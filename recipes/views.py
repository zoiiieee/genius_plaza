from django.core.exceptions import PermissionDeniedfrom django.db import transactionfrom django.http import HttpResponseRedirectfrom django.urls import reverse_lazyfrom django.utils.functional import cached_propertyfrom django.views.generic import ListView, DeleteView, DetailViewfrom formtools.wizard.views import SessionWizardViewfrom recipes import forms as recipe_formsfrom recipes.models import RecipeModel, IngredientModel, StepModelclass CreateRecipeView(SessionWizardView):    template_name = "recipes/create_recipe.html"    success_url = reverse_lazy('recipe-success')    form_list = [        ("recipe", recipe_forms.RecipeDetailsForm),        ("ingredients", recipe_forms.IngredientFormSet),        ("steps", recipe_forms.StepFormSet),        ("confirmation", recipe_forms.ConfirmationStep)    ]    template_dict = {        'confirmation': 'recipes/confirm_recipe.html'    }    def get_template_names(self):        return [self.template_dict.get(self.steps.current, self.template_name)]    def test_func(self):        return hasattr(self, 'user')    def get_context_data(self, form, **kwargs):        context = super().get_context_data(form, **kwargs)        if self.steps.current == 'confirmation':            recipe = self.get_all_cleaned_data()            ingredients = recipe.pop('formset-ingredients', None)            steps = recipe.pop('formset-steps', None)            context.update({                'recipe': recipe,                'ingredients': ingredients,                'steps': steps            })        return context    def done(self, form_list, **kwargs):        cleaned_data = self.get_all_cleaned_data()        ingredients = cleaned_data.pop('formset-ingredients', None)        steps = cleaned_data.pop('formset-steps', None)        with transaction.atomic():            recipe = RecipeModel(**cleaned_data)            recipe.save()            for ingredient in ingredients:                ingredient['recipe'] = recipe                IngredientModel.objects.create(**ingredient)            for step in steps:                step['recipe'] = recipe                StepModel.objects.create(**step)        return HttpResponseRedirect(self.success_url)class ViewRecipe(DetailView):    template_name = 'recipes/confirm_recipe.html'    success_url = reverse_lazy('recipe-dashboard')    @cached_property    def recipe_id(self):        return self.kwargs.get('pk', None)    @cached_property    def recipe(self):        try:            recipe = RecipeModel.objects.get(id=self.recipe_id)        except (RecipeModel.DoesNotExist, RecipeModel.MultipleObjectsReturned):            raise PermissionDenied('Invalid recipe selected.')        return recipe    def get_object(self, queryset=None):        return self.recipe    def post(self, request, pk):        return HttpResponseRedirect(self.success_url)    def get_context_data(self, **kwargs):        context = super(ViewRecipe, self).get_context_data(**kwargs)        if self.object:            recipe = self.object            context.update({                'recipe': recipe,                'ingredients': recipe.ingredients.all(),                'steps': recipe.steps.all()            })        return contextclass ViewAllRecipes(ListView):    model = RecipeModel    def get_context_data(self, **kwargs):        context = super(ViewAllRecipes, self).get_context_data(**kwargs)        recipes = list(context['object_list'])        recipes = sorted(recipes, key=lambda x: x.user, reverse=False)        context['object_list'] = recipes        return contextclass RecipeDelete(DeleteView):    model = RecipeModel    success_url = reverse_lazy('view-all-recipes')